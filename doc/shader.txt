Shader 和材质系统架构设计
    Vertex Shader
        预置uniforms：
            matWorld, matView, matProj
            time；可能分为几个不同用途的？
        可以将自定义的计算函数嵌入到顶点的下列处理阶段中：Local, View, Projection
        或者可以提供一些系统默认的变量和函数，放在不同的shader文件中，供自定义shader引用；
        可以自定义顶点输出 output
    Fragment Shader
        预置uniforms:
            time
            列表：
                总光源列表
                    光源类型、位置、方向、范围、颜色、Shadowmap图块位置；
                总Decal列表
                    Decal的变换矩阵、图块位置
                总Cubemap列表
                    位置、CubemapArray索引
                总Irradiance volume列表
                    变换矩阵、纹理列表索引
            Fix me: 上述列表是传入整个场景的，还是当前视野范围内的？

            Shadowmap图集纹理
            Decal图集纹理
            Cubemap Array纹理
            Irradiance volume纹理列表

            Cluster-光源列表、Decal、Cubemap array、Irraniance volume索引？

        默认Shader:
            预定义的uniforms和真实感光影着色算法；
            支持次表面反射；
        表面属性Shader:
            计算表面属性；
            自己定义输入uniforms；
            可以自定义顶点输入 input
            无需访问各种列表，光照通过表面属性自动计算；和默认Shader算法一致；
        自定义Shader:
            自己定义输入uniforms；
            可以自定义顶点输入 input
            可以调用各种系统提供的函数
            可以访问各种列表，自己计算最终着色输出颜色；
    Shader 调试
        如果Shader编译失败，在控制台输出编译log；
材质
    主要是用于记录 RenderState 和 Shader 的 Uniforms
    加载 shader 时自动反射 uniforms 并赋予默认值；
    每材质的 uniform buffer object 放在哪？