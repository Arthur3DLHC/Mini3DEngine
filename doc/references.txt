----------------参考资料和学习笔记-------------------

js 物理引擎
    cannon.js
        完全开源；纯 js 代码
    ammo.js
        通过 emscripten 将 C++ 的 Bullet 引擎转为 js；源代码不可读。

emscripten: 一个可以将 c++ 代码转换成 js 代码的工具

minimal-gltf-loader js 模型加载机制
    模型异步加载，通过回调知道加载完毕
    在加载完毕的回调函数中再将模型对象添加到场景
    怎样知道模型依赖的所有文件（shader, 贴图）都加载完毕了：计数。
        申请加载网格个数
        申请加载Shader个数
        申请加载贴图个数
        已加载网格个数
        已加载Shader个数
        已加载贴图个数

Three.js 缓存
    文件缓存
    Geometry 缓存
        缓存的 key 是怎么生成的？

Three.js 的顶点缓冲创建
    WebGLAttributes.js
        createBuffer 函数
        updateBuffer 和 update 函数
        采用的是 Attribute 定义对象引用数据缓冲对象的形式。

Three.js 的顶点格式设置
    WebGLRenderer.setupVertexAttributes
        函数中会区分一下是否是交错格式的 Buffer

Three.js 的渲染上下文
    WebGLRenderer
        states: 各种渲染状态，如半透明混合等
        renderStates: 光源，阴影等
        renderList: 要画的各种图元
            生成 renderList: 在WebGLRenderer.Render 函数，projectObject() 调用
            projectObject() 是一个递归调用；会递归遍历场景中的 object 树，区分 object 类型，分别向 RenderList, Lights, Shadows 集合中添加；

Three.js Shader 预处理
    使用正则表达式替换所有 #include 字符串：WebGLProgram.js
    系统内置 Shader 源代码直接用字符串的形式写在 js 文件中；
    ShaderChunks.js 中引入了所有的内置 Shader 源码字符串；

Three.js 场景树
    Scene 类也是 Object3D 类的子类；从 gltf 中加载得到的是一个 scene 对象；其中的各网格是其子节点；
    可以考虑通过 minimal-gltf-loader 加载出 gltf 对象后，在 onLoad 回调函数中创建一个 scene 对象，根据 gltf 中的内容创建其子对象；然后将此 scene 对象添加到根场景对象中。

Babylon.js
    是用 typescript 开发的，太有参考价值了！
        学习名称空间怎么用；Rollup的使用；typescript 的异步加载机制怎么实现；